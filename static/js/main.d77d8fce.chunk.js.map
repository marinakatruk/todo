{"version":3,"sources":["components/list.module.scss","App.module.scss","components/button.module.scss","components/counter.module.scss","components/list.jsx","components/button.jsx","components/counter.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","List","items","removeItem","completeItem","className","styles","list","map","item","index","listItem","key","style","textDecoration","isCompleted","text","onClick","type","completeButton","deleteButton","value","Button","color","button","backgroundColor","Counter","total","completed","itemCounter","display","length","App","useState","setItems","setValue","setTotal","setCompleted","container","onSubmit","event","preventDefault","newItems","addItem","form","input","placeholder","onChange","target","splice","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d77d8fce.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"list_list__1k9GO\",\"listItem\":\"list_listItem__FCmRU\",\"deleteButton\":\"list_deleteButton__2mixh\",\"completeButton\":\"list_completeButton__151GN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__eSJ6i\",\"form\":\"App_form__33OEa\",\"input\":\"App_input__13lVr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"button_button__2vIJC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"itemCounter\":\"counter_itemCounter__2EOQL\"};","import React from 'react'\nimport styles from './list.module.scss'\n\nconst List = ({ items, removeItem, completeItem }) => {\n\n\n    return (\n        <ul className={styles.list}>\n            {items.map((item, index) => (\n                <li className={styles.listItem}\n                    key={index}\n                    index={index}\n                >\n                    <span\n                        style={{ textDecoration: item.isCompleted ? \"line-through\" : \"\" }}\n                    >\n                        {item.text}\n                    </span>\n                    \n                    <div>\n                        <button\n                            onClick={() => completeItem(index)}\n                            type=\"button\"\n                            className={styles.completeButton}\n                        >\n                            &#10004;\n                        </button>\n                        <button\n                            onClick={() => removeItem(index)}\n                            type=\"button\"\n                            className={styles.deleteButton}\n                            value={item.text}\n                        >\n                            &times;\n                        </button>\n                    </div>\n                </li>\n            ))}\n        </ul>\n    )\n}\n\nexport default List;","import React from 'react'\n\nimport styles from './button.module.scss'\n\n\nconst Button = ({ type, text, color, onClick }) => {\n    \n    return (\n        <button\n            type={type}\n            className={styles.button}\n            style={{ backgroundColor: `${color}`}}\n            onClick={onClick}\n        >\n            {text}\n        </button>\n    )\n}\n\nexport default Button;","import React from 'react'\n\nimport styles from './counter.module.scss'\n\nconst Counter = ({ items, total, completed }) => {\n\n    return (\n        <div\n            className={styles.itemCounter}\n            style={{display: items.length === 0 ? \"none\" : \"\" }}\n        >\n            Total:<span>{total}</span>\n            Completed:<span>{completed}</span>\n      </div>\n    )\n}\n\nexport default Counter;","import React from 'react';\nimport { useState } from 'react'\n\nimport styles from'./App.module.scss';\nimport List from './components/list'\nimport Button from './components/button'\nimport Counter from './components/counter'\n\nfunction App() {\n\n  const [items, setItems] = useState([]);\n  const [value, setValue] = useState(\"\");\n\n  const [total, setTotal] = useState(0);\n  const [completed, setCompleted] = useState(0);\n\n\n  const addItem = (text) => {\n    const newItems = [...items, { text, isCompleted: false }];\n    setItems(newItems);\n    setTotal(total + 1);\n  };\n\n\n  const clearAll = () => {\n    setItems([]);\n    setTotal(0);\n    setCompleted(0);\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    if (!value) return;\n    addItem(value);\n    setValue(\"\");\n  }\n\n  const removeItem = (index) => {\n    const newItems = [...items];\n    if (newItems[index].isCompleted === true) {\n      setCompleted(completed - 1);\n    }\n    newItems.splice(index, 1);\n    setItems(newItems);\n    setTotal(total - 1);\n  }\n\n  const completeItem = (index) => {\n    \n    const newItems = [...items];\n    if (newItems[index].isCompleted) {\n      newItems[index].isCompleted = false;\n      setItems(newItems);\n      setCompleted(completed - 1);\n    } else {\n      newItems[index].isCompleted = true;\n      setItems(newItems);\n      setCompleted(completed + 1);\n    }\n  }\n\n\n  return (\n    <div className={styles.container}>\n      <h1>ToDo App</h1>\n      <form onSubmit={handleSubmit} className={styles.form}>\n        <input\n          className={styles.input}\n          type=\"text\"\n          placeholder=\"New item\"\n          value={value}\n          onChange={event => setValue(event.target.value)}\n        >\n        </input>\n        <Button type=\"submit\" text=\"Add\" color=\"#00BFFF\"/>\n      </form>\n      <h2>Your ToDo List</h2>\n      <List items={items} removeItem={removeItem} completeItem={completeItem}/>\n      <Counter total={total} completed={completed} items={items} />\n      <Button onClick={clearAll} type=\"reset\" text=\"Clear All\" color=\"#FF6347\"/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}